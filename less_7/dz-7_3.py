# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его
# конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). В классе
# должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление
# клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек
# в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются
# все оставшиеся.


class Cell:
    def __init__(self, count):
        self.count = count

    def __add__(self, other):
        return self.count + other.count

    def __sub__(self, other):
        res_sub = self.count - other.count
        if res_sub <= 0:
            return f'отсутствует количество'
        else:
            return self.count - other.count

    def __mul__(self, other):
        return self.count * other.count

    def __truediv__(self, other):
        return round(self.count / other.count)

    def make_order(self,num):
        return '\n'.join(['*' * num for i in range(self.count // num)]) + '\n' + '*' * (self.count % num)

cell_1 = Cell(10)
cell_2 = Cell(15)
print(f'Сложение двух клеток будет клетка с {cell_1 + cell_2} клетки')
print(f'Вычитание двух клеток будет клетка с {cell_1 - cell_2} клетки')
print(f'Умножение двух клеток будет клетка с {cell_1 * cell_2} клетки')
print(f'Деление двух клеток будет клетка с {round(cell_1 / cell_2)} клетки')
print(cell_1.make_order(5))
print(cell_2.make_order(4))